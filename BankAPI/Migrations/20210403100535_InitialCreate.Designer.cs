// <auto-generated />
using System;
using BankAPI.Context;
using BankAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankAPI.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20210403100535_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BankAPI.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stairway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("BankAPI.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionsHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BankAPI.Entities.BankAccount", b =>
                {
                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IBAN");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("BankAPI.Entities.Card", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountIBAN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CVV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HolderFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HolderIBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("expirationTimeId")
                        .HasColumnType("int");

                    b.HasKey("CardNumber");

                    b.HasIndex("BankAccountIBAN");

                    b.HasIndex("expirationTimeId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("BankAPI.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DateOfBirthId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeAddressId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DateOfBirthId");

                    b.HasIndex("HomeAddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BankAPI.Entities.NormalDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NormalDate");
                });

            modelBuilder.Entity("BankAPI.Entities.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BankAccountIBAN1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverIBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderIBAN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("BankAccountIBAN1");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("BankAPI.Entities.RecurringTransaction", b =>
                {
                    b.HasBaseType("BankAPI.Entities.Transaction");

                    b.Property<string>("BankAccountIBAN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DaysInterval")
                        .HasColumnType("int");

                    b.Property<int?>("FirstPaymentDateId")
                        .HasColumnType("int");

                    b.Property<int?>("LastPaymentDateId")
                        .HasColumnType("int");

                    b.Property<bool>("isMonthly")
                        .HasColumnType("bit");

                    b.HasIndex("BankAccountIBAN");

                    b.HasIndex("FirstPaymentDateId");

                    b.HasIndex("LastPaymentDateId");

                    b.HasDiscriminator().HasValue("RecurringTransaction");
                });

            modelBuilder.Entity("BankAPI.Entities.BankAccount", b =>
                {
                    b.HasOne("BankAPI.Entities.Customer", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("BankAPI.Entities.Card", b =>
                {
                    b.HasOne("BankAPI.Entities.BankAccount", null)
                        .WithMany("Cards")
                        .HasForeignKey("BankAccountIBAN");

                    b.HasOne("BankAPI.Entities.NormalDate", "expirationTime")
                        .WithMany()
                        .HasForeignKey("expirationTimeId");
                });

            modelBuilder.Entity("BankAPI.Entities.Customer", b =>
                {
                    b.HasOne("BankAPI.Entities.NormalDate", "DateOfBirth")
                        .WithMany()
                        .HasForeignKey("DateOfBirthId");

                    b.HasOne("BankAPI.Entities.Address", "HomeAddress")
                        .WithMany()
                        .HasForeignKey("HomeAddressId");
                });

            modelBuilder.Entity("BankAPI.Entities.Transaction", b =>
                {
                    b.HasOne("BankAPI.Entities.BankAccount", null)
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountIBAN1");
                });

            modelBuilder.Entity("BankAPI.Entities.RecurringTransaction", b =>
                {
                    b.HasOne("BankAPI.Entities.BankAccount", null)
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("BankAccountIBAN");

                    b.HasOne("BankAPI.Entities.NormalDate", "FirstPaymentDate")
                        .WithMany()
                        .HasForeignKey("FirstPaymentDateId");

                    b.HasOne("BankAPI.Entities.NormalDate", "LastPaymentDate")
                        .WithMany()
                        .HasForeignKey("LastPaymentDateId");
                });
#pragma warning restore 612, 618
        }
    }
}
